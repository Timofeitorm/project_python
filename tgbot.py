# --- –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ª–∏–± ---
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import aiosqlite
from datetime import datetime, timedelta
import logging
import re
import openpyxl
from io import BytesIO
import os

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = '7844365314:AAHLa4M51ocIC0EPFqKPCKu8Pln6caGgq74'
bot = Bot(token=TOKEN)
dp = Dispatcher()


# --- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ ---
def format_number(num):
    return "{:,.0f}".format(num).replace(",", " ")


# --- –°–æ—Å—Ç–æ—è–Ω–∏—è FSM (Finite State Machine ‚Äî –∫–æ–Ω–µ—á–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)---
class TransactionStates(StatesGroup):
    waiting_for_category = State() #–±–æ—Ç –∂–¥—ë—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–¥—ë—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    waiting_for_amount = State() #–±–æ—Ç –æ–∂–∏–¥–∞–µ—Ç —Å—É–º–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    waiting_for_date_range = State()#–±–æ—Ç –∂–¥—ë—Ç, –≤—ã–±–µ—Ä–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
    waiting_for_start_date = State() #–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∑–∞–¥–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –≤—Ä—É—á–Ω—É—é, –±–æ—Ç –∂–¥—ë—Ç –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É
    waiting_for_end_date = State() #–ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã –±–æ—Ç –∂–¥—ë—Ç –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É
    waiting_for_category_filter = State() #–µ—Å–ª–∏ –±–æ—Ç —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –æ–Ω –º–æ–∂–µ—Ç –∂–¥–∞—Ç—å –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏


# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ---
async def init_db():
    async with aiosqlite.connect("finance.db") as db:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        await db.execute('''
            CREATE TABLE IF NOT EXISTS transactions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                type TEXT,
                amount REAL,
                category TEXT,
                description TEXT DEFAULT '',
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü description, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        try:
            await db.execute('ALTER TABLE transactions ADD COLUMN description TEXT DEFAULT ""')
            await db.commit()
        except aiosqlite.OperationalError as e:
            if "duplicate column name" not in str(e):
                raise e

        # –¢–∞–±–ª–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        await db.execute('''
            CREATE TABLE IF NOT EXISTS categories (
                user_id INTEGER,
                category_type TEXT,
                category_name TEXT,
                PRIMARY KEY (user_id, category_type, category_name)
            )
        ''')

        # –ò–Ω–¥–µ–∫—Å—ã
        await db.execute('''
            CREATE INDEX IF NOT EXISTS idx_transactions_user_id ON transactions (user_id)
        ''')
        await db.execute('''
            CREATE INDEX IF NOT EXISTS idx_transactions_timestamp ON transactions (timestamp)
        ''')

        await db.commit()
# --- –ö–Ω–æ–ø–∫–∏ ---
def get_main_menu_buttons():#–Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∏ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥", callback_data="add_expense"),
         InlineKeyboardButton(text="üí∞ –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥", callback_data="add_income")],
        [InlineKeyboardButton(text="üìä –û—Ç—á—ë—Ç—ã", callback_data="open_reports"),
         InlineKeyboardButton(text="üìÅ Excel –æ—Ç—á—ë—Ç", callback_data="excel_report")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é", callback_data="delete_transaction")]
    ])


def get_report_period_buttons():#–æ—Ç—á–µ—Ç—ã
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –î–µ–Ω—å", callback_data="r_day"),
         InlineKeyboardButton(text="üóì –ú–µ—Å—è—Ü", callback_data="r_month")],
        [InlineKeyboardButton(text="üìä –ö–≤–∞—Ä—Ç–∞–ª", callback_data="r_quarter"),
         InlineKeyboardButton(text="üìÜ –ì–æ–¥", callback_data="r_year")],
        [InlineKeyboardButton(text="üìÖ –†—É—á–Ω–æ–π –ø–µ—Ä–∏–æ–¥", callback_data="r_custom")],
        [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])


def get_filter_buttons(period):#—Ñ–∏–ª—å—Ç—Ä—ã –æ—Ç—á–µ—Ç–æ–≤
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìà –¢–æ–ª—å–∫–æ –¥–æ—Ö–æ–¥—ã", callback_data=f"f_income_{period}"),
         InlineKeyboardButton(text="üìâ –¢–æ–ª—å–∫–æ —Ä–∞—Å—Ö–æ–¥—ã", callback_data=f"f_expense_{period}")],
        [InlineKeyboardButton(text="üìä –í—Å—ë", callback_data=f"f_all_{period}")],
        [InlineKeyboardButton(text="üè∑ –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data=f"f_category_{period}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="open_reports")]
    ])


def get_cancel_button():#–æ—Ç–º–µ–Ω–∞
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_input")]
    ])


def get_back_to_menu_button():#–∫–Ω–æ–ø–∫–∞ –≥–ª–∞–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])


def get_confirmation_buttons(action):#–∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"confirm_{action}"),
         InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cancel_input")]
    ])


# --- –°—Ç–∞—Ä—Ç ---
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer( #–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=get_main_menu_buttons()
    )


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π ---
@dp.callback_query()
async def handle_callback(callback: types.CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
        data = callback.data
        user_id = callback.from_user.id

        if data == "back_to_menu":
            await state.clear()
            await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu_buttons())

        elif data == "cancel_input":
            await state.clear()
            await callback.message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu_buttons())

        elif data == "add_expense":
            await state.set_state(TransactionStates.waiting_for_category)
            await state.update_data(t_type="—Ä–∞—Å—Ö–æ–¥")
            await callback.message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –µ–¥–∞, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è):",
                reply_markup=get_cancel_button()
            )

        elif data == "add_income":
            await state.set_state(TransactionStates.waiting_for_category)
            await state.update_data(t_type="–¥–æ—Ö–æ–¥")
            await callback.message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∑–∞—Ä–ø–ª–∞—Ç–∞, –ø–æ–¥–∞—Ä–æ–∫, –ø—Ä–µ–º–∏—è):",
                reply_markup=get_cancel_button()
            )

        elif data == "open_reports":
            await callback.message.answer("–í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥:", reply_markup=get_report_period_buttons())

        elif data == "excel_report":
            await state.set_state(TransactionStates.waiting_for_start_date)
            await state.update_data(excel_report=True)
            await callback.message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –¥–ª—è –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:",
                reply_markup=get_cancel_button()
            )

        elif data.startswith("r_"):
            period = data[2:]
            if period == "custom":
                await state.set_state(TransactionStates.waiting_for_start_date)
                await callback.message.answer(
                    "–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:",
                    reply_markup=get_cancel_button()
                )
            else:
                await callback.message.answer("–í—ã–±–µ—Ä–∏ —Ñ–∏–ª—å—Ç—Ä:", reply_markup=get_filter_buttons(period))

        elif data.startswith("f_"):
            parts = data.split("_")
            f_type = parts[1]  # income / expense / all / category
            period = parts[2]

            if f_type == "category":
                await state.set_state(TransactionStates.waiting_for_category_filter)
                await state.update_data(report_period=period, filter_type=f_type)

                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                async with aiosqlite.connect("finance.db") as db:
                    cursor = await db.execute("""
                        SELECT DISTINCT category FROM transactions 
                        WHERE user_id = ? ORDER BY category
                    """, (user_id,))
                    categories = await cursor.fetchall()

                if categories:
                    buttons = []
                    for category in categories:
                        buttons.append([InlineKeyboardButton(
                            text=category[0],
                            callback_data=f"set_category_{period}_{category[0]}"
                        )])
                    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"open_reports")])

                    await callback.message.answer(
                        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
                    )
                else:
                    await callback.message.answer(
                        "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.",
                        reply_markup=get_main_menu_buttons()
                    )
            else:
                await send_report(callback, period, f_type)

        elif data.startswith("set_category_"):
            parts = data.split("_")
            period = parts[2]
            category = "_".join(parts[3:])
            await send_report(callback, period, "category", category)

        elif data == "delete_transaction":
            await callback.message.answer(
                "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üí∞ –î–æ—Ö–æ–¥", callback_data="del_type_–¥–æ—Ö–æ–¥")],
                    [InlineKeyboardButton(text="üí∏ –†–∞—Å—Ö–æ–¥", callback_data="del_type_—Ä–∞—Å—Ö–æ–¥")],
                    [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
                ])
            )

        elif data.startswith("del_type_"):
            t_type = data.split("_")[2]  # –¥–æ—Ö–æ–¥ / —Ä–∞—Å—Ö–æ–¥

            async with aiosqlite.connect("finance.db") as db:
                cursor = await db.execute("""
                    SELECT id, amount, category, timestamp
                    FROM transactions
                    WHERE user_id = ? AND type = ?
                    ORDER BY timestamp DESC
                    LIMIT 10
                """, (user_id, t_type))
                rows = await cursor.fetchall()

            if not rows:
                await callback.message.answer(f"üì≠ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è ({t_type})",
                                              reply_markup=get_main_menu_buttons())
                return

            buttons = []
            for row in rows:
                tid, amount, category, timestamp = row
                label = f"{format_number(amount)}‚ÇΩ ‚Äî {category} ({timestamp[:10]})"
                buttons.append([InlineKeyboardButton(text=label, callback_data=f"del_confirm_{tid}")])

            buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="delete_transaction")])

            await callback.message.answer(
                f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —É–¥–∞–ª–∏—Ç—å ({t_type}):",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
            )

        elif data.startswith("del_confirm_"):
            tid = int(data.split("_")[2])
            await callback.message.answer(
                "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é?",
                reply_markup=get_confirmation_buttons(f"delete_{tid}")
            )

        elif data.startswith("confirm_delete_"):
            tid = int(data.split("_")[2])
            async with aiosqlite.connect("finance.db") as db:
                await db.execute("DELETE FROM transactions WHERE id = ?", (tid,))
                await db.commit()
            await callback.message.answer("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞", reply_markup=get_main_menu_buttons())

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_callback: {e}")
        try:
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
        except:
            pass


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ---
@dp.message(TransactionStates.waiting_for_category)
async def process_category(message: types.Message, state: FSMContext):
    category = message.text.strip()
    if len(category) > 30:
        await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –ú–∞–∫—Å–∏–º—É–º 30 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    data = await state.get_data()
    if 'filter_type' in data:  # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –æ—Ç—á–µ—Ç–∞
        await state.clear()
        await send_report(message, data['report_period'], 'category', category)
    else:  # –ï—Å–ª–∏ —ç—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        await state.update_data(category=category)
        await state.set_state(TransactionStates.waiting_for_amount)
        t_type = data['t_type']

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        async with aiosqlite.connect("finance.db") as db:
            await db.execute('''
                INSERT OR IGNORE INTO categories (user_id, category_type, category_name)
                VALUES (?, ?, ?)
            ''', (message.from_user.id, t_type, category))
            await db.commit()

        await message.answer(
            f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É {t_type}–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1500):",
            reply_markup=get_cancel_button()
        )


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã ---
@dp.message(TransactionStates.waiting_for_amount)
async def process_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text.strip().replace(",", "."))
        if amount <= 0:
            await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
            return

        data = await state.get_data()
        t_type = data['t_type']
        category = data['category']

        async with aiosqlite.connect("finance.db") as db:
            await db.execute('''
                INSERT INTO transactions (user_id, type, amount, category, description)
                VALUES (?, ?, ?, ?, ?)
            ''', (message.from_user.id, t_type, amount, category, ""))
            await db.commit()

        await state.clear()
        await message.answer(
            f"{'‚úÖ –î–æ—Ö–æ–¥' if t_type == '–¥–æ—Ö–æ–¥' else 'üí∏ –†–∞—Å—Ö–æ–¥'} –∑–∞–ø–∏—Å–∞–Ω:\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
            f"–°—É–º–º–∞: {format_number(amount)}‚ÇΩ",
            reply_markup=get_main_menu_buttons()
        )
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500 –∏–ª–∏ 99.90).")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –¥–ª—è –æ—Ç—á–µ—Ç–∞ ---
@dp.message(TransactionStates.waiting_for_start_date)
async def process_start_date(message: types.Message, state: FSMContext):
    try:
        date_str = message.text.strip()
        datetime.strptime(date_str, "%Y-%m-%d")  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
        await state.update_data(start_date=date_str)

        data = await state.get_data()
        if data.get('excel_report'):
            await state.set_state(TransactionStates.waiting_for_end_date)
            await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è –æ—Ç—á–µ—Ç–∞ –∑–∞ –æ–¥–∏–Ω –¥–µ–Ω—å):",
                reply_markup=get_cancel_button()
            )
        else:
            await state.set_state(TransactionStates.waiting_for_end_date)
            await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:",
                reply_markup=get_cancel_button()
            )
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2023-12-31).")


@dp.message(TransactionStates.waiting_for_end_date)
async def process_end_date(message: types.Message, state: FSMContext):
    try:
        end_date_str = message.text.strip().lower()
        data = await state.get_data()

        if data.get('excel_report') and end_date_str == '–Ω–µ—Ç':
            end_date_str = data['start_date']
        else:
            datetime.strptime(end_date_str, "%Y-%m-%d")  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞

        start_date = data['start_date']

        if end_date_str < start_date:
            await message.answer("–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª—å–Ω–æ–π.")
            return

        if data.get('excel_report'):
            await state.clear()
            await generate_excel_report(
                message.from_user.id,
                message,
                start_date,
                end_date_str
            )
        else:
            await state.clear()
            await send_report(
                message,
                "custom",
                "all",
                custom_start=start_date,
                custom_end=end_date_str
            )
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2023-12-31).")


# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel –æ—Ç—á–µ—Ç–∞ ---
async def generate_excel_report(user_id, message, start_date, end_date):
    try:
        wb = openpyxl.Workbook()
        ws = wb.active
        ws.title = "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        headers = ["–î–∞—Ç–∞", "–¢–∏–ø", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–°—É–º–º–∞", "–û–ø–∏—Å–∞–Ω–∏–µ"]
        ws.append(headers)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        async with aiosqlite.connect("finance.db") as db:
            cursor = await db.execute("""
                SELECT 
                    timestamp, 
                    type, 
                    category, 
                    amount, 
                    COALESCE(description, '') as description
                FROM transactions
                WHERE user_id = ? AND DATE(timestamp) BETWEEN ? AND ?
                ORDER BY timestamp
            """, (user_id, start_date, end_date))
            rows = await cursor.fetchall()

        if not rows:
            await message.answer(
                "üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥",
                reply_markup=get_main_menu_buttons()
            )
            return

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        total_income = 0
        total_expense = 0
        income_categories = {}
        expense_categories = {}

        for row in rows:
            timestamp, t_type, category, amount, description = row
            date_str = timestamp.split()[0]

            ws.append([
                date_str,
                t_type.capitalize(),
                category,
                amount,
                description
            ])

            if t_type == "–¥–æ—Ö–æ–¥":
                total_income += amount
                if category not in income_categories:
                    income_categories[category] = 0
                income_categories[category] += amount
            else:
                total_expense += amount
                if category not in expense_categories:
                    expense_categories[category] = 0
                expense_categories[category] += amount

        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–∏
        ws.append([])
        ws.append(["–ò—Ç–æ–≥–æ:"])
        ws.append(["–î–æ—Ö–æ–¥—ã:", total_income])
        ws.append(["–†–∞—Å—Ö–æ–¥—ã:", total_expense])
        ws.append(["–ë–∞–ª–∞–Ω—Å:", total_income - total_expense])

        # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_ws = wb.create_sheet(title="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        stats_ws.append(["–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–¢–∏–ø", "–°—É–º–º–∞"])

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º
        chart_row = 1
        for category, amount in income_categories.items():
            stats_ws.append([category, "–î–æ—Ö–æ–¥", amount])
            chart_row += 1

        for category, amount in expense_categories.items():
            stats_ws.append([category, "–†–∞—Å—Ö–æ–¥", amount])
            chart_row += 1

        # –î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–æ–≤ (–∫—Ä—É–≥–æ–≤–∞—è)
        if income_categories:
            income_pie = openpyxl.chart.PieChart()
            income_labels = openpyxl.chart.Reference(stats_ws,
                                                     min_col=1,
                                                     min_row=2,
                                                     max_row=len(income_categories) + 1)
            income_data = openpyxl.chart.Reference(stats_ws,
                                                   min_col=3,
                                                   min_row=1,
                                                   max_row=len(income_categories) + 1)
            income_pie.title = "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"
            income_pie.add_data(income_data, titles_from_data=True)
            income_pie.set_categories(income_labels)
            income_pie.width = 15
            income_pie.height = 9
            ws.add_chart(income_pie, "G2")

        # –î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ (–∫—Ä—É–≥–æ–≤–∞—è)
        if expense_categories:
            expense_pie = openpyxl.chart.PieChart()
            expense_labels = openpyxl.chart.Reference(stats_ws,
                                                      min_col=1,
                                                      min_row=len(income_categories) + 2,
                                                      max_row=chart_row)
            expense_data = openpyxl.chart.Reference(stats_ws,
                                                    min_col=3,
                                                    min_row=len(income_categories) + 1,
                                                    max_row=chart_row)
            expense_pie.title = "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"
            expense_pie.add_data(expense_data, titles_from_data=True)
            expense_pie.set_categories(expense_labels)
            expense_pie.width = 15
            expense_pie.height = 9
            ws.add_chart(expense_pie, "G20")

        # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–æ—Ö–æ–¥–æ–≤/—Ä–∞—Å—Ö–æ–¥–æ–≤
        if income_categories and expense_categories:
            bar_chart = openpyxl.chart.BarChart()
            bar_chart.title = "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤"
            bar_chart.style = 10
            bar_chart.y_axis.title = "–°—É–º–º–∞"
            bar_chart.x_axis.title = "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏"
            bar_chart.width = 25
            bar_chart.height = 12

            data = openpyxl.chart.Reference(stats_ws,
                                            min_col=3,
                                            min_row=1,
                                            max_row=chart_row)
            cats = openpyxl.chart.Reference(stats_ws,
                                            min_col=1,
                                            min_row=2,
                                            max_row=chart_row)

            bar_chart.add_data(data, titles_from_data=True)
            bar_chart.set_categories(cats)
            ws.add_chart(bar_chart, "G38")

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        for sheet in wb:
            for column in sheet.columns:
                max_length = 0
                column_letter = column[0].column_letter
                for cell in column:
                    try:
                        if len(str(cell.value)) > max_length:
                            max_length = len(str(cell.value))
                    except:
                        pass
                adjusted_width = (max_length + 2)
                sheet.column_dimensions[column_letter].width = adjusted_width

            for row in sheet.iter_rows():
                for cell in row:
                    if isinstance(cell.value, (int, float)):
                        cell.number_format = '#,##0.00'

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
        buffer = BytesIO()
        wb.save(buffer)
        buffer.seek(0)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await message.answer_document(
            types.BufferedInputFile(
                buffer.read(),
                filename=f"finance_report_{start_date}_{end_date}.xlsx"
            ),
            caption=f"üìä –ü–æ–ª–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç\n"
                    f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date} - {end_date}\n"
                    f"üü¢ –î–æ—Ö–æ–¥—ã: {format_number(total_income)}‚ÇΩ ({len(income_categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π)\n"
                    f"üî¥ –†–∞—Å—Ö–æ–¥—ã: {format_number(total_expense)}‚ÇΩ ({len(expense_categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π)\n"
                    f"üí∞ –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {format_number(total_income - total_expense)}‚ÇΩ",
            reply_markup=get_main_menu_buttons()
        )
        buffer.close()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel –æ—Ç—á–µ—Ç–∞: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞",
            reply_markup=get_main_menu_buttons()
        )


# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ ---
async def send_report(source, period: str, filter_type: str, category_filter=None, custom_start=None, custom_end=None):
    if isinstance(source, types.CallbackQuery):
        user_id = source.from_user.id
        message = source.message
    else:
        user_id = source.from_user.id
        message = source

    now = datetime.now()

    if period == "day":
        where = "DATE(timestamp)=?"
        params = [now.strftime("%Y-%m-%d")]
        title = "üìÖ –°–µ–≥–æ–¥–Ω—è"
    elif period == "month":
        where = "strftime('%Y-%m', timestamp)=?"
        params = [now.strftime("%Y-%m")]
        title = "üóì –≠—Ç–æ—Ç –º–µ—Å—è—Ü"
    elif period == "quarter":
        quarter = (now.month - 1) // 3 + 1
        months = [(quarter - 1) * 3 + i for i in range(1, 4)]
        placeholders = ','.join('?' * len(months))
        where = f"strftime('%Y', timestamp)=? AND cast(strftime('%m', timestamp) as int) IN ({placeholders})"
        params = [str(now.year)] + months
        title = f"üìä {quarter}-–π –∫–≤–∞—Ä—Ç–∞–ª"
    elif period == "year":
        where = "strftime('%Y', timestamp)=?"
        params = [str(now.year)]
        title = "üìÜ –≠—Ç–æ—Ç –≥–æ–¥"
    elif period == "custom":
        where = "DATE(timestamp) BETWEEN ? AND ?"
        params = [custom_start, custom_end]
        title = f"üìÖ –ü–µ—Ä–∏–æ–¥ —Å {custom_start} –ø–æ {custom_end}"
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
        return

    query = f'''
        SELECT type, category, amount, timestamp
        FROM transactions
        WHERE user_id=? AND {where}
    '''
    if filter_type == "income":
        query += " AND type='–¥–æ—Ö–æ–¥'"
        title += " ‚Äì –î–æ—Ö–æ–¥—ã"
    elif filter_type == "expense":
        query += " AND type='—Ä–∞—Å—Ö–æ–¥'"
        title += " ‚Äì –†–∞—Å—Ö–æ–¥—ã"
    elif filter_type == "category" and category_filter:
        query += " AND category=?"
        params.append(category_filter)
        title += f" ‚Äì –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_filter}"
    else:
        title += " ‚Äì –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"

    async with aiosqlite.connect("finance.db") as db:
        cursor = await db.execute(query, (user_id, *params))
        rows = await cursor.fetchall()

    if not rows:
        await message.answer(
            f"{title}\n\nüì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥",
            reply_markup=get_main_menu_buttons()
        )
        return

    total_income = 0
    total_expense = 0
    categories = {}
    text = f"<b>{title}</b>\n\n"

    for t_type, category, amount, ts in rows:
        emoji = "üü¢" if t_type == "–¥–æ—Ö–æ–¥" else "üî¥"
        text += f"{emoji} <b>{t_type.capitalize()}</b> ‚Äì {category}: {format_number(amount)}‚ÇΩ\nüïí {ts}\n\n"

        if t_type == "–¥–æ—Ö–æ–¥":
            total_income += amount
        else:
            total_expense += amount

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        if category not in categories:
            categories[category] = {"income": 0, "expense": 0}
        if t_type == "–¥–æ—Ö–æ–¥":
            categories[category]["income"] += amount
        else:
            categories[category]["expense"] += amount

    balance = total_income - total_expense
    text += "<b>–ò—Ç–æ–≥–∏:</b>\n"
    text += f"üü¢ –î–æ—Ö–æ–¥–æ–≤: {format_number(total_income)}‚ÇΩ\n"
    text += f"üî¥ –†–∞—Å—Ö–æ–¥–æ–≤: {format_number(total_expense)}‚ÇΩ\n"
    text += f"üí∞ –ë–∞–ª–∞–Ω—Å: {format_number(balance)}‚ÇΩ {'(–ø–ª—é—Å)' if balance >= 0 else '(–º–∏–Ω—É—Å)'}\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    if filter_type != "category":
        text += "<b>–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:</b>\n"
        for category, amounts in categories.items():
            cat_balance = amounts["income"] - amounts["expense"]
            if amounts["income"] > 0 and amounts["expense"] > 0:
                text += f"üè∑ {category}: +{format_number(amounts['income'])} / -{format_number(amounts['expense'])} = {format_number(cat_balance)}‚ÇΩ\n"
            elif amounts["income"] > 0:
                text += f"üè∑ {category}: +{format_number(amounts['income'])}‚ÇΩ\n"
            else:
                text += f"üè∑ {category}: -{format_number(amounts['expense'])}‚ÇΩ\n"

    await message.answer(text, parse_mode="HTML", reply_markup=get_main_menu_buttons())


# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    await init_db()
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())